# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines a function that adds integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)`` returns the addition of its two arguments. For numbers,
that value is the same as(equivalent to) using the ``+``operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::

	>>> add_integer(2, -3)
	-1

The function outputs the correct result when floating-point
values are used as well.

::

	>>> add_integer(2.0, 3.0)
	5

Do note that floats are casted to ints(integers) before
addition is performed.

::

	>>> add_integer(2.9, 0.2)
	2

::

	>>> add_integer(-2.9, -0.2)
	-2

The floating point and non-floating point values can
be combined.

::
	>>> add_integer(2.3, -3)
	-1

The Second argumenet is optional - by default, it is 98.

::
	>>> add_integer(2)
	100

Non-Numbers
===========

``add_integer()`` this function expects that both arguments
are either integers or floats. If one of the arguments is
not an integer and not a float, a TypeError is raised:

::

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: argument a must be an integer

::
	>>> add_integer(2, "hello")
	Traceback (most recent call last):
	TypeError: argument b must be an integer

::
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: argument a must be an integer

::
	>>> add_integer(2.3, None)
	Traceback (most recent call last):
	TypeError: argument b must be an integer

If both arguments are not integers and not floats, a
TypeError message is printed for the first argument.

::

	>>> add_integer("hello", "there")
	Traceback (most recent call last):
	TypeError: argument a must be an integer

The function will fail if infinity is provided.

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

And with NaN numbers.

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
